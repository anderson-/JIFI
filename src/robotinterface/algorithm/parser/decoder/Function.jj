/* 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 */options{  JAVA_UNICODE_ESCAPE = true;  STATIC = false;  //DEBUG_PARSER = true;}PARSER_BEGIN(Decoder)package robotinterface.algorithm.parser.decoder;import robotinterface.algorithm.parser.FunctionToken;import robotinterface.algorithm.procedure.*;import robotinterface.algorithm.parser.Parser;import robotinterface.gui.panels.code.CodeEditorPanel;public class Decoder{  private Token mark = null;  private boolean functionCall = false;  private Token functionID = null;  private String parameters = null;  private Procedure last = null;  public static void main(String [] args) throws ParseException  {    Decoder parser = new Decoder(System.in);    Function f = parser.decode();    System.out.println(Parser.encode(f));  }  private void mark()  {    mark = token;  }  private String getString()  {    if (mark == null) return null;    StringBuilder sb = new StringBuilder();    while (mark != token)    {      mark = mark.next;      sb.append(' ').append(mark);    }    mark = null;    if (sb.length() > 1)    {      return sb.substring(1);    }    else    {      return "";    }  }}PARSER_END(Decoder)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : /*  RESERVED WORDS */{  < VARIABLE : "var" >| < FUNCTION : "func" >| < IF : "if" >| < ELSE : "else" >| < WHILE : "while" >| < BREAK : "break" >| < CONTINUE : "continue" >| < RETURN : "return" >}TOKEN : /* LITERALS */{  < INTEGER_LITERAL :    < DECIMAL_LITERAL > ([ "l", "L" ])?  | < HEX_LITERAL > ([ "l", "L" ])?  | < OCTAL_LITERAL > ([ "l", "L" ])? >| < #DECIMAL_LITERAL : ([ "+" , "-" ])? [ "1"-"9" ] ([ "0"-"9" ])* >| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >| < FLOATING_POINT_LITERAL :    ([ "0"-"9" ])+ "." ([ "0"-"9" ])* (< EXPONENT >)? ([ "f", "F", "d", "D" ])?  | "." ([ "0"-"9" ])+ (< EXPONENT >)? ([ "f", "F", "d", "D" ])?  | ([ "0"-"9" ])+ < EXPONENT > ([ "f", "F", "d", "D" ])?  | ([ "0"-"9" ])+ (< EXPONENT >)? [ "f", "F", "d", "D" ] >| < #EXPONENT : [ "e", "E" ] ([ "+", "-" ])? ([ "0"-"9" ])+ >| < STRING_LITERAL :    "\""    (      (~["-", "\"", "\\", "\n", "\r" ])    |      (        "\\"        (          [ "n", "t", "b", "r", "f", "\\", "'", "\"" ]        | [ "0"-"7" ] ([ "0"-"7" ])?        | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]        )      )    )*    "\"" >}TOKEN : /* IDENTIFIERS */{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "$", "A"-"Z", "_", "a"-"z", "À"-"Ö", "Ø"-"ö", "ø"-"ÿ", "Ā"-"῿", "぀"-"㆏", "㌀"-"㍿", "㐀"-"㴭", "一"-"鿿", "豈"-"﫿" ] >| < #DIGIT : [ "0"-"9", "٠"-"٩", "۰"-"۹", "०"-"९", "০"-"৯", "੦"-"੯", "૦"-"૯", "୦"-"୯", "௧"-"௯", "౦"-"౯", "೦"-"೯", "൦"-"൯", "๐"-"๙", "໐"-"໙", "၀"-"၉" ] >}/* OPERATORS */TOKEN :{  < ASSIGN : "=" >| < GT : ">" >| < LT : "<" >| < EQ : "==" >| < LE : "<=" >| < GE : ">=" >| < NE : "!=" >| < SC_OR : "||" >| < SC_AND : "&&" >| < INCR : "++" >| < DECR : "--" >| < PLUS : "+" >| < MINUS : "-" >| < STAR : "*" >| < SLASH : "/" >| < BIT_AND : "&" >| < BIT_OR : "|" >| < XOR : "^" >| < REM : "%" >}TOKEN : /* SEPARATORS */{  < LPAREN : "(" >| < RPAREN : ")" >| < LBRACE : "{" >| < RBRACE : "}" >| < LBRACKET : "[" >| < RBRACKET : "]" >| < SEMICOLON : ";" >| < COMMA : "," >| < DOT : "." >}Function decode() :{  Token tFunction;  Block block;}{  < FUNCTION > tFunction = < IDENTIFIER > arguments()  {    Function f = new Function(tFunction.image, null);  }  block(f, false)  {    return f;  }}void arguments() :{}{  "(" [ argumentList() ] ")"}void argumentList() :{}{  < VARIABLE > simpleVariableDeclaration()  (    "," < VARIABLE > simpleVariableDeclaration()  )*}void simpleVariableDeclaration() :{}{  < IDENTIFIER > ("[" "]")* [ "=" variableInitialization() ]}void variableDeclaration() :{}{  < VARIABLE > simpleVariableDeclaration()  (    LOOKAHEAD(2)    "," simpleVariableDeclaration()  )*}void variableInitialization() :{}{  //alterar para {}!!
  "["  [    variableInitialization()    (      LOOKAHEAD(2)      "," variableInitialization()    )*  ]  [ "," ] "]"| literal()| expression()}void assignment() :{}{  PrimaryExpression() "=" variableInitialization()}void expression() :{}{  LOOKAHEAD(PrimaryExpression() "=")  assignment()| ConditionalOrExpression()}void ConditionalOrExpression() :{}{  ConditionalAndExpression()  (    "||" ConditionalAndExpression()  )*}void ConditionalAndExpression() :{}{  InclusiveOrExpression()  (    "&&" InclusiveOrExpression()  )*}void InclusiveOrExpression() :{}{  ExclusiveOrExpression()  (    "|" ExclusiveOrExpression()  )*}void ExclusiveOrExpression() :{}{  AndExpression()  (    "^" AndExpression()  )*}void AndExpression() :{}{  EqualityExpression()  (    "&" EqualityExpression()  )*}void EqualityExpression() :{}{  RelationalExpression()  (    (      "=="    | "!="    )    RelationalExpression()  )*}void RelationalExpression() :{}{  ShiftExpression()  (    (      "<"    | ">"    | "<="    | ">="    )    ShiftExpression()  )*}void ShiftExpression() :{}{  AdditiveExpression()  (    (      "<<"    | ">>"    | ">>>"    )    AdditiveExpression()  )*}void AdditiveExpression() :{}{  MultiplicativeExpression()  (    (      "+"    | "-"    )    MultiplicativeExpression()  )*}void MultiplicativeExpression() :{}{  UnaryExpression()  (    (      "*"    | "/"    | "%"    )    UnaryExpression()  )*}void UnaryExpression() :{}{  (    "+"  | "-"  )  UnaryExpression()| PreIncrementExpression()| PreDecrementExpression()| UnaryExpressionNotPlusMinus()}void PreIncrementExpression() :{}{  "++" PrimaryExpression()}void PreDecrementExpression() :{}{  "--" PrimaryExpression()}void UnaryExpressionNotPlusMinus() :{}{  (    "~"  | "!"  )  UnaryExpression()| PostfixExpression()}void PostfixExpression() :{}{  PrimaryExpression()  [    "++"  | "--"  ]}void PrimaryExpression() :{}{  primaryPrefix()  (    primarySuffix()  )*}void primaryPrefix() :{}{  literal()| functionID = < IDENTIFIER >| "(" expression() ")"}void literal() :{}{  < INTEGER_LITERAL >| < FLOATING_POINT_LITERAL >| < STRING_LITERAL >}void primarySuffix() :{}{  "[" expression() "]"| "." < IDENTIFIER >| mark = "("  [    name()    (      "," name()    )*  ]  {    if (functionID != null)    {      parameters = getString();      functionCall = true;    }    else    {      functionID = null;      parameters = null;      functionCall = false;    }  }  ")"}void name() :{}{  literal()| < IDENTIFIER >}void block(Block block, boolean add) :{  if (add)  {    Block b = new Block();    block.add(b);    block = b;  }}{  "{"  (    statement(block)  )*  "}"  {    last = null;  }}void statement(Block block) :{  boolean add =  (    block != null && block.getClass() == Block.class  )  ;}{  block(block, add)| ";"|  {    mark();  }  expression()  {    if (block != null)    {      if (functionCall)      {
        boolean error = true;        for (FunctionToken ftoken : CodeEditorPanel.getFunctionTokens())        {          if (ftoken.getToken().equals(functionID.toString()))          {
            parameters = parameters.trim();            block.add(ftoken.createInstance(parameters));
            error = false;            break;          }        }

		if (error)		{			throw new ParseException("Invalid function call: " + functionID.toString());  
      	}        last = null;      }      else      {        if (last == null || last.getClass() != Procedure.class)        {          last = new Procedure(getString());          block.add(last);        }        else        {          last.append(getString());        }      }      functionCall = false;    }  }| ifStatement(block)| whileStatement(block)|  {    mark();  }  variableDeclaration() //alterar para statementExpression() para permitir a++
  {    if (block != null)    {      if (last == null || last.getClass() != Procedure.class)      {        last = new Procedure(getString());        block.add(last);      }      else      {        last.append(getString());      }    }  }}void ifStatement(Block b) :{  String ex;  If i = new If();  last = i;  Block bTrue = i.getBlockTrue(), bFalse = i.getBlockFalse();}{  < IF > mark = "(" expression()  {    ex = getString();  }  ")" statement(bTrue) [ < ELSE > statement(bFalse) ]  {    i.setProcedure(ex);    b.add(i);  }}void whileStatement(Block b) :{  While w = new While();  last = w;  String ex;}{  < WHILE > mark = "(" expression()  {    ex = getString();  }  ")" statement(w)  {    w.setProcedure(ex);    b.add(w);  }}