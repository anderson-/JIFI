/*  *  *  *  *  *  *  *  */options{  JAVA_UNICODE_ESCAPE = true;  STATIC = false;  //DEBUG_PARSER = true; }PARSER_BEGIN(Decoder)package robotinterface.algorithm.parser.decoder;import java.util.Stack;import org.nfunk.jep.JEP;import robotinterface.algorithm.parser.FunctionToken;import robotinterface.algorithm.procedure.*;import robotinterface.algorithm.parser.Parser;import robotinterface.algorithm.parser.parameterparser.Argument;import robotinterface.algorithm.parser.parameterparser.ParameterParser;import robotinterface.gui.panels.editor.EditorPanel;import robotinterface.interpreter.Get;import robotinterface.gui.panels.robot.RobotControlPanel;import robotinterface.robot.device.Device;public class Decoder{  private JEP jep = new JEP();  private boolean functionCall = false;  private Procedure last = null;  private Stack < Token > markStack = new Stack < Token > ();  private Stack < String > varList = new Stack < String > ();  private Block localBlock = null;  public static void main(String [] args) throws ParseException  {    Decoder parser = new Decoder(System.in);    Function f = parser.decode();    System.out.println(Parser.encode(f));  }  private int mark()  {    markStack.push(token);    return markStack.size();  }  private String getString(int m)  {    while (markStack.size() > 1 && markStack.size() > m)    {      markStack.pop();    }    String str = getString();    return str;  }  private void checkVar() throws ParseException  {    boolean error = true;    if (varList.contains(token.toString()))    {      error = false;    }    for (Class < ? extends Device > c : RobotControlPanel.getAvailableDevices())    {      String str = c.getSimpleName();      try      {        str = c.newInstance().getName();      }      catch (Exception ex)      {}      if (str.equals(token.toString()))      {        error = false;        break;      }    }    jep.initSymTab(); // clear the contents of the function table    jep.addStandardConstants();    jep.addFunction("get", new Get());    for (Object o : jep.getSymbolTable().keySet())    {      if (o.toString().equals(token.toString()))      {        error = false;        break;      }    }    if (error)    {      throw new ParseException(token, new int [] []      {}      , new String []      {        "Variavel \"" + token.toString() + "\" não declarada"      }      );    }  }  private String getString()  {    if (markStack.isEmpty()) return null;    Token mark = markStack.pop();    StringBuilder sb = new StringBuilder();    while (mark != token)    {      mark = mark.next;      sb.append(' ').append(mark);    }    mark = null;    if (sb.length() > 1)    {      //System.out.println("~ '" + sb.substring(1) + "'");      return sb.substring(1);    }    else    {      return "";    }  }}PARSER_END(Decoder)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : /*  COMMENTS */{  < COMMENT :    "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < MULTICOMMENT :    "/*" (~[ "*" ])* "*"    (      "*"    | ~[ "*", "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /*  RESERVED WORDS */{  < VARIABLE : "var" >| < FUNCTION : "func" >| < IF : "if" >| < ELSE : "else" >| < WHILE : "while" >| < BREAK : "break" >| < CONTINUE : "continue" >| < RETURN : "return" >}TOKEN : /* LITERALS */{  < INTEGER_LITERAL :    < DECIMAL_LITERAL > ([ "l", "L" ])?  | < HEX_LITERAL > ([ "l", "L" ])?  | < OCTAL_LITERAL > ([ "l", "L" ])? >| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >| < FLOATING_POINT_LITERAL :    ([ "0"-"9" ])+ "." ([ "0"-"9" ])* (< EXPONENT >)? ([ "f", "F", "d", "D" ])?  | "." ([ "0"-"9" ])+ (< EXPONENT >)? ([ "f", "F", "d", "D" ])?  | ([ "0"-"9" ])+ < EXPONENT > ([ "f", "F", "d", "D" ])?  | ([ "0"-"9" ])+ (< EXPONENT >)? [ "f", "F", "d", "D" ] >| < #EXPONENT : [ "e", "E" ] ([ "+", "-" ])? ([ "0"-"9" ])+ >| < STRING_LITERAL :    "\""    (      (~[ "\"", "\\", "\n", "\r" ])    |      (        "\\"        (          [ "n", "t", "b", "r", "f", "\\", "'", "\"" ]        | [ "0"-"7" ] ([ "0"-"7" ])?        | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]        )      )    )*    "\"" >}TOKEN : /* IDENTIFIERS */{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "$", "A"-"Z", "_", "a"-"z", "À"-"Ö", "Ø"-"ö", "ø"-"ÿ", "Ā"-"῿", "぀"-"㆏", "㌀"-"㍿", "㐀"-"㴭", "一"-"鿿", "豈"-"﫿" ] >| < #DIGIT : [ "0"-"9", "٠"-"٩", "۰"-"۹", "०"-"९", "০"-"৯", "੦"-"੯", "૦"-"૯", "୦"-"୯", "௧"-"௯", "౦"-"౯", "೦"-"೯", "൦"-"൯", "๐"-"๙", "໐"-"໙", "၀"-"၉" ] >}/* OPERATORS */TOKEN :{  < ASSIGN : "=" >| < GT : ">" >| < LT : "<" >| < EQ : "==" >| < LE : "<=" >| < GE : ">=" >| < NE : "!=" >| < SC_OR : "||" >| < SC_AND : "&&" >| < INCR : "++" >| < DECR : "--" >| < PLUS : "+" >| < MINUS : "-" >| < STAR : "*" >| < SLASH : "/" >| < BIT_AND : "&" >| < BIT_OR : "|" >| < XOR : "^" >| < REM : "%" >}TOKEN : /* SEPARATORS */{  < LPAREN : "(" >| < RPAREN : ")" >| < LBRACE : "{" >| < RBRACE : "}" >| < LBRACKET : "[" >| < RBRACKET : "]" >| < SEMICOLON : ";" >| < COMMA : "," >| < DOT : "." >}Function decode() :{  Token tFunction;  String args;  Block block;}{  < FUNCTION > tFunction = < IDENTIFIER > args = arguments()  {    Function f = new Function(tFunction.image, args);  }  block(f, false)  {    return f;  }}String arguments() :{  String str;}{  "("  {    int m = mark();  }  [ argumentList() ]  {    str = getString(m);  }  ")"  {    return str;  }}void argumentList() :{}{  < VARIABLE > simpleVariableDeclaration()  (    "," < VARIABLE > simpleVariableDeclaration()  )*}void simpleVariableDeclaration() :{  Token newVar = null;}{  newVar = < IDENTIFIER > ("[" "]")* [ "=" variableInitialization() ]  {    varList.push(newVar.toString());  }}void variableDeclaration() :{}{  < VARIABLE > simpleVariableDeclaration()  (    LOOKAHEAD(2)    "," simpleVariableDeclaration()  )*}void variableInitialization() :{}{  expression()| //alterar para {}!!  "["  [    variableInitialization()    (      LOOKAHEAD(2)      "," variableInitialization()    )*  ]  [ "," ] "]"}void assignment() :{}{  PrimaryExpression() "=" variableInitialization()}void expression() :{}{  LOOKAHEAD(PrimaryExpression() "=")  assignment()| ConditionalOrExpression()}void ConditionalOrExpression() :{}{  ConditionalAndExpression()  (    "||" ConditionalAndExpression()  )*}void ConditionalAndExpression() :{}{  InclusiveOrExpression()  (    "&&" InclusiveOrExpression()  )*}void InclusiveOrExpression() :{}{  ExclusiveOrExpression()  (    "|" ExclusiveOrExpression()  )*}void ExclusiveOrExpression() :{}{  AndExpression()  (    "^" AndExpression()  )*}void AndExpression() :{}{  EqualityExpression()  (    "&" EqualityExpression()  )*}void EqualityExpression() :{}{  RelationalExpression()  (    (      "=="    | "!="    )    RelationalExpression()  )*}void RelationalExpression() :{}{  ShiftExpression()  (    (      "<"    | ">"    | "<="    | ">="    )    ShiftExpression()  )*}void ShiftExpression() :{}{  AdditiveExpression()  (    (      "<<"    | ">>"    | ">>>"    )    AdditiveExpression()  )*}void AdditiveExpression() :{}{  MultiplicativeExpression()  (    (      "+"    | "-"    )    MultiplicativeExpression()  )*}void MultiplicativeExpression() :{}{  UnaryExpression()  (    (      "*"    | "/"    | "%"    )    UnaryExpression()  )*}void UnaryExpression() :{}{  (    "+"  | "-"  )  UnaryExpression()| PreIncrementExpression()| PreDecrementExpression()| UnaryExpressionNotPlusMinus()}void PreIncrementExpression() :{}{  "++" PrimaryExpression()}void PreDecrementExpression() :{}{  "--" PrimaryExpression()}void UnaryExpressionNotPlusMinus() :{}{  (    "~"  | "!"  )  UnaryExpression()| PostfixExpression()}void PostfixExpression() :{}{  PrimaryExpression()  [    "++"  | "--"  ]}void PrimaryExpression() :{}{  primaryPrefix()  (    primarySuffix()  )*}void primaryPrefix() :{}{  literal()| LOOKAHEAD(< IDENTIFIER > "(")  functionCall(localBlock)| < IDENTIFIER >  {    checkVar();  }| "(" expression() ")"}void literal() :{}{  < INTEGER_LITERAL >| < FLOATING_POINT_LITERAL >| < STRING_LITERAL >}void primarySuffix() :{}{  "[" expression() "]"| "." < IDENTIFIER >}void name() :{}{  literal()| < IDENTIFIER >  {    checkVar();  }}void block(Block block, boolean add) :{  if (add)  {    Block b = new Block();    block.add(b);    block = b;  }  localBlock = block;}{  "{"  (    statement(block)  )*  "}"  {    last = null;  }}void statement(Block block) :{  int m = 0;  boolean add =  (    block != null && block.getClass() == Block.class  )  ;}{  block(block, add)| ";"|  {    m = mark();  }  < COMMENT >  {	//System.out.println("c:" + getString(m));	block.add(new Comment(getString(m)));  }|  {    m = mark();  }  < MULTICOMMENT >  {	//System.out.println("mc:" + getString(m));	block.add(new Comment(getString(m)));  }|  {    m = mark();  }  expression() ";"  {    if (block != null && !functionCall)    {      if (last == null || last.getClass() != Procedure.class)      {        last = new Procedure(getString(m));        block.add(last);      }      else      {        last.append(getString(m));      }    }    functionCall = false;  }| ifStatement(block)| whileStatement(block)| < BREAK > ";"  {    block.add(new BreakLoop());  }|  {    m = mark();  }  variableDeclaration() //alterar para statementExpression() para permitir a++  {    if (block != null)    {      if (last == null || last.getClass() != Procedure.class)      {        last = new Procedure(getString(m));        block.add(last);      }      else      {        last.append(getString(m));      }    }  }}void functionCall(Block block) :{  int m = 0;  Stack < Integer > argType = new Stack < Integer > ();  Stack < String > argEx = new Stack < String > ();  Token tmpToken;  Token functionID;}{  functionID = < IDENTIFIER > "("  [    {      m = mark();      tmpToken = token;    }    expression()    {      argType.push(((tmpToken.next.image == token.image) ? token.kind : - 1));      argEx.push(getString(m));    }    (      ","      {        m = mark();        tmpToken = token;      }      expression()      {        argType.push(((tmpToken.next.image == token.image) ? token.kind : - 1));        argEx.push(getString(m));      }    )*  ]  {    boolean error = true;    for (FunctionToken ftoken : EditorPanel.getFunctionTokens())    {      if (ftoken.getToken().equals(functionID.toString()))      {        Argument [ ] args = ParameterParser.parse(functionID.toString(), argType, argEx, - 1 /*ftoken.getParameters()*/, token);        block.add(ftoken.createInstance(args));        //parameters = parameters.trim();        //block.add(ftoken.createInstance(parameters));        error = false;        functionCall = true;        last = null;        break;      }    }    jep.initFunTab(); // clear the contents of the function table    jep.addStandardFunctions();    jep.addFunction("get", new Get());    for (Object o : jep.getFunctionTable().keySet())    {      if (o.toString().equals(functionID.toString()))      {        error = false;        break;      }    }    if (error)    {      throw new ParseException(token, new int [ ] [ ]      {}      , new String [ ]      {        "Função \"" + functionID.toString() + "\" inválida"      }      );    }  }  ")"}void ifStatement(Block b) :{  String ex;  If i = new If();  last = i;  Block bTrue = i.getBlockTrue(), bFalse = i.getBlockFalse();}{  < IF > "("  {    int m = mark();  }  expression()  {    ex = getString(m);  }  ")" block(bTrue, false) [ < ELSE > (block(bFalse, false) | ifStatement(bFalse)) ]  {    i.addLineArg(0, Argument.EXPRESSION, ex);    b.add(i);    localBlock = b;  }}void whileStatement(Block b) :{  While w = new While();  last = w;  String ex;}{  < WHILE > "("  {    int m = mark();  }  expression()  {    ex = getString(m);  }  ")" block(w, false)  {    w.addLineArg(0, Argument.EXPRESSION, ex);    b.add(w);    localBlock = b;  }}