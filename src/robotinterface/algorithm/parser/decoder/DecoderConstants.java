/* Generated By:JavaCC: Do not edit this line. DecoderConstants.java */
package robotinterface.algorithm.parser.decoder;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface DecoderConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int VARIABLE = 5;
  /** RegularExpression Id. */
  int FUNCTION = 6;
  /** RegularExpression Id. */
  int IF = 7;
  /** RegularExpression Id. */
  int ELSE = 8;
  /** RegularExpression Id. */
  int WHILE = 9;
  /** RegularExpression Id. */
  int BREAK = 10;
  /** RegularExpression Id. */
  int CONTINUE = 11;
  /** RegularExpression Id. */
  int RETURN = 12;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 13;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 14;
  /** RegularExpression Id. */
  int HEX_LITERAL = 15;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 16;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 17;
  /** RegularExpression Id. */
  int EXPONENT = 18;
  /** RegularExpression Id. */
  int STRING_LITERAL = 19;
  /** RegularExpression Id. */
  int IDENTIFIER = 20;
  /** RegularExpression Id. */
  int LETTER = 21;
  /** RegularExpression Id. */
  int DIGIT = 22;
  /** RegularExpression Id. */
  int ASSIGN = 23;
  /** RegularExpression Id. */
  int GT = 24;
  /** RegularExpression Id. */
  int LT = 25;
  /** RegularExpression Id. */
  int EQ = 26;
  /** RegularExpression Id. */
  int LE = 27;
  /** RegularExpression Id. */
  int GE = 28;
  /** RegularExpression Id. */
  int NE = 29;
  /** RegularExpression Id. */
  int SC_OR = 30;
  /** RegularExpression Id. */
  int SC_AND = 31;
  /** RegularExpression Id. */
  int INCR = 32;
  /** RegularExpression Id. */
  int DECR = 33;
  /** RegularExpression Id. */
  int PLUS = 34;
  /** RegularExpression Id. */
  int MINUS = 35;
  /** RegularExpression Id. */
  int STAR = 36;
  /** RegularExpression Id. */
  int SLASH = 37;
  /** RegularExpression Id. */
  int BIT_AND = 38;
  /** RegularExpression Id. */
  int BIT_OR = 39;
  /** RegularExpression Id. */
  int XOR = 40;
  /** RegularExpression Id. */
  int REM = 41;
  /** RegularExpression Id. */
  int LPAREN = 42;
  /** RegularExpression Id. */
  int RPAREN = 43;
  /** RegularExpression Id. */
  int LBRACE = 44;
  /** RegularExpression Id. */
  int RBRACE = 45;
  /** RegularExpression Id. */
  int LBRACKET = 46;
  /** RegularExpression Id. */
  int RBRACKET = 47;
  /** RegularExpression Id. */
  int SEMICOLON = 48;
  /** RegularExpression Id. */
  int COMMA = 49;
  /** RegularExpression Id. */
  int DOT = 50;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"var\"",
    "\"func\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"break\"",
    "\"continue\"",
    "\"return\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"<<\"",
    "\">>\"",
    "\">>>\"",
    "\"~\"",
    "\"!\"",
  };

}
